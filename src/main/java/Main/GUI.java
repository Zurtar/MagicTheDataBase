package Main;

import forohfor.scryfall.api.Card;

import java.util.ArrayList;

import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Steve
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    DefaultTableModel tableModel;
    ArrayList<Card> cardList;

    public GUI() {
        initComponents();
        clearResultTable();

        ListSelectionModel selectionModel = resultTable.getSelectionModel();
        selectionModel.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                /**
                 * we do this so that when the value is changing from selected
                 * to deselected it does not fetch the image for nothing. This
                 * prevents our selectionValueChanged() method from being called
                 * twice every time a card is selected
                 */
                if (e.getValueIsAdjusting()) {
                    return;
                }
                updateCardInfo();
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        largeImageFrame = new javax.swing.JFrame();
        largeImageLabel = new javax.swing.JLabel();
        largeImageHeader = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        searchPanel2 = new javax.swing.JPanel();
        resultScrollPane2 = new javax.swing.JScrollPane();
        resultTable2 = new javax.swing.JTable();
        searchButton2 = new javax.swing.JButton();
        cmcComboBox = new javax.swing.JComboBox<>();
        cardTypeComboBox = new javax.swing.JComboBox<>();
        titleLabel = new javax.swing.JLabel();
        creatureTypeComboBox = new javax.swing.JComboBox<>();
        colourComboBox = new javax.swing.JComboBox<>();
        searchField = new javax.swing.JTextField();
        resultPageCountLabel = new javax.swing.JLabel();
        filterCMCBox = new javax.swing.JCheckBox();
        filterColourBox = new javax.swing.JCheckBox();
        filterCardBox = new javax.swing.JCheckBox();
        filterCreatureTypeBox = new javax.swing.JCheckBox();
        filterOracleBox = new javax.swing.JCheckBox();
        filterNameBox = new javax.swing.JCheckBox();
        oracleText = new javax.swing.JTextField();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        cardImageHeaderLabel = new javax.swing.JLabel();
        cardImageLabel = new javax.swing.JLabel();
        cardNameLabel = new javax.swing.JLabel();
        cardNameDisplay = new javax.swing.JTextField();
        setLabel = new javax.swing.JLabel();
        setDisplay = new javax.swing.JTextField();
        manaCostLabel = new javax.swing.JLabel();
        manaCostDisplay = new javax.swing.JTextField();
        cardTypeLabel = new javax.swing.JLabel();
        cardTypeDisplay = new javax.swing.JTextField();
        colourLabel2 = new javax.swing.JLabel();
        colourDisplay = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        cardOracleDisplay = new javax.swing.JTextArea();

        largeImageLabel.setMaximumSize(new java.awt.Dimension(488, 700));
        largeImageLabel.setMinimumSize(new java.awt.Dimension(488, 680));
        largeImageLabel.setPreferredSize(new java.awt.Dimension(488, 690));

        largeImageHeader.setText("Large Image Window");

        javax.swing.GroupLayout largeImageFrameLayout = new javax.swing.GroupLayout(largeImageFrame.getContentPane());
        largeImageFrame.getContentPane().setLayout(largeImageFrameLayout);
        largeImageFrameLayout.setHorizontalGroup(
            largeImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(largeImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(largeImageHeader)
        );
        largeImageFrameLayout.setVerticalGroup(
            largeImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(largeImageFrameLayout.createSequentialGroup()
                .addComponent(largeImageHeader)
                .addGap(11, 11, 11)
                .addComponent(largeImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 685, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1280, 860));

        searchPanel2.setMaximumSize(new java.awt.Dimension(1280, 870));
        searchPanel2.setMinimumSize(new java.awt.Dimension(1280, 870));
        searchPanel2.setPreferredSize(new java.awt.Dimension(1266, 870));
        searchPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        resultTable2.setBackground(new java.awt.Color(204, 204, 204));
        resultTable2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        resultTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Sets", "Mana costs", "Card Type", "Color(s)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultTable2.setRowHeight(24);
        resultScrollPane2.setViewportView(resultTable2);

        searchPanel2.add(resultScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 173, 925, 449));

        searchButton2.setText("Search");
        searchPanel2.add(searchButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 75, -1, -1));

        cmcComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3","4","5","6","7","8","9","10","11","12", }));
        searchPanel2.add(cmcComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 30, 90, -1));

        cardTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Enchantment", "Creature", "Artifact", "Land","Insant","Sorcery" }));
        searchPanel2.add(cardTypeComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 60, 90, -1));

        titleLabel.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(0, 102, 0));
        titleLabel.setText("Magic: The Database");
        searchPanel2.add(titleLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        creatureTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Advisor","Aetherborn","Ally","Angel","Antelope","Ape","Archer","Archon","Army","Artificer","Assassin","Assembly-Worker","Atog","Aurochs","Avatar","Azra","Badger","Barbarian","Basilisk","Bat","Bear","Beast","Beeble","Berserker","Bird","Blinkmoth","Boar","Bringer","Brushwagg","Camarid","Camel","Caribou","Carrier","Cat","Centaur","Cephalid","Chimera","Citizen","Cleric","Cockatrice","Construct","Coward","Crab","Crocodile","Cyclops","Dauthi","Demigod","Demon","Deserter","Devil","Dinosaur","Djinn","Dragon","Drake","Dreadnought","Drone","Druid","Dryad","Dwarf","Efreet","Egg","Elder","Eldrazi","Elemental","Elephant","Elf","Elk","Eye","Faerie","Ferret","Fish","Flagbearer","Fox","Frog","Fungus","Gargoyle","Germ","Giant","Gnome","Goat","Goblin","God","Golem","Gorgon","Graveborn","Gremlin","Griffin","Hag","Harpy","Hellion","Hippo","Hippogriff","Homarid","Homunculus","Horror","Horse","Hound","Human","Hydra","Hyena","Illusion","Imp","Incarnation","Insect","Jackal","Jellyfish","Juggernaut","Kavu","Kirin","Kithkin","Knight","Kobold","Kor","Kraken","Lamia","Lammasu","Leech","Leviathan","Lhurgoyf","Licid","Lizard","Manticore","Masticore","Mercenary","Merfolk","Metathran","Minion","Minotaur","Mole","Monger","Mongoose","Monk","Monkey","Moonfolk","Mouse","Mutant","Myr","Mystic","Naga","Nautilus","Nephilim","Nightmare","Nightstalker","Ninja","Noble","Noggle","Nomad","Nymph","Octopus","Ogre","Ooze","Orb","Orc","Orgg","Otter","Ouphe","Ox","Oyster","Pangolin","Peasant","Pegasus","Pentavite","Pest","Phelddagrif","Phoenix","Pilot","Pincher","Pirate","Plant","Praetor","Prism","Processor","Rabbit","Rat","Rebel","Reflection","Rhino","Rigger","Rogue","Sable","Salamander","Samurai","Sand","Saproling","Satyr","Scarecrow","Scion","Scorpion","Scout","Sculpture","Serf","Serpent","Servo","Shade","Shaman","Shapeshifter","Shark","Sheep","Siren","Skeleton","Slith","Sliver","Slug","Snake","Soldier","Soltari","Spawn","Specter","Spellshaper","Sphinx","Spider","Spike","Spirit","Splinter","Sponge","Squid","Squirrel","Starfish","Surrakar","Survivor","Tentacle","Tetravite","Thalakos","Thopter","Thrull","Treefolk","Trilobite","Triskelavite","Troll","Turtle","Unicorn","Vampire","Vedalken","Viashino","Volver","Wall","Warlock","Warrior","Weird","Werewolf","Whale","Wizard","Wolf","Wolverine","Wombat","Worm","Wraith","Wurm","Yeti","Zombie","Zubera" }));
        searchPanel2.add(creatureTypeComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 90, 90, -1));

        colourComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "White", "Blue", "Black", "Red", "Green" }));
        searchPanel2.add(colourComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 0, 90, -1));
        searchPanel2.add(searchField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 76, 502, -1));
        searchPanel2.add(resultPageCountLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 883, -1, -1));

        filterCMCBox.setText("Filter By CMC");
        searchPanel2.add(filterCMCBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 30, -1, -1));

        filterColourBox.setText("Filter By Colour");
        searchPanel2.add(filterColourBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 0, -1, -1));

        filterCardBox.setText("Filter By Cardtype");
        searchPanel2.add(filterCardBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 60, -1, -1));

        filterCreatureTypeBox.setText("Filter By Creature type");
        searchPanel2.add(filterCreatureTypeBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 90, -1, -1));

        filterOracleBox.setText("Filter By Oracle Text");
        searchPanel2.add(filterOracleBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 120, -1, -1));

        filterNameBox.setText("Filter By Name");
        searchPanel2.add(filterNameBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 150, -1, -1));

        oracleText.setMinimumSize(new java.awt.Dimension(28, 20));
        oracleText.setPreferredSize(new java.awt.Dimension(28, 20));
        searchPanel2.add(oracleText, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 120, 110, 23));

        cardImageHeaderLabel.setText("Click Image For Large Version");

        cardImageLabel.setFont(new java.awt.Font("Tahoma", 3, 48)); // NOI18N
        cardImageLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        cardImageLabel.setPreferredSize(new java.awt.Dimension(146, 204));

        cardNameLabel.setText("Card Name:");

        cardNameDisplay.setEditable(false);

        setLabel.setText("Set(s):");

        setDisplay.setEditable(false);

        manaCostLabel.setText("Mana Cost:");

        manaCostDisplay.setEditable(false);

        cardTypeLabel.setText("Card Type:");

        cardTypeDisplay.setEditable(false);

        colourLabel2.setText("Colour(s):");

        colourDisplay.setEditable(false);

        jLabel1.setText("Oracle Text:");

        cardOracleDisplay.setEditable(false);
        cardOracleDisplay.setColumns(20);
        cardOracleDisplay.setLineWrap(true);
        cardOracleDisplay.setRows(5);
        jScrollPane1.setViewportView(cardOracleDisplay);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(cardImageHeaderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(cardImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cardNameLabel)
                                .addComponent(setLabel))
                            .addGap(8, 8, 8)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(setDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                                .addComponent(cardNameDisplay)))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(colourLabel2)
                            .addGap(18, 18, 18)
                            .addComponent(colourDisplay))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(cardTypeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cardTypeDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(manaCostLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(manaCostDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(cardImageHeaderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cardImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cardNameLabel)
                    .addComponent(cardNameDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setLabel)
                    .addComponent(setDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(manaCostDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manaCostLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cardTypeLabel)
                    .addComponent(cardTypeDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(colourLabel2)
                    .addComponent(colourDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 5, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("tab1", jPanel2);

        searchPanel2.add(jTabbedPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 10, -1, 610));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1280, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(searchPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 870, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(searchPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateCardInfo() {
        Card c = cardList.get(resultTable.getSelectedRow());
        cardImageLabel.setIcon(ScryfallInteraction.getImage(c, "small"));

        cardNameDisplay.setText(c.getName());
        setDisplay.setText(c.getSetCode());
        manaCostDisplay.setText(c.getManaCost());
        cardTypeDisplay.setText(c.getTypeLine());
        if (!c.getColorIdentity().isEmpty()) {
            colourDisplay.setText(c.getColorIdentity().get(0));
        }
        cardOracleDisplay.setText(c.getOracleText());
    }

    private void setResultTable(ArrayList<Card> cardList) {
        //updating the size of our JTable
        tableModel.setRowCount(cardList.size());
        resultTable.setModel(tableModel);

        //Filling in the table with our card data
        for (int i = 0; i < cardList.size(); i++) {
            Card currentCard = cardList.get(i);
            resultTable.setValueAt(currentCard.getName(), i, 0);
            resultTable.setValueAt(currentCard.getSetCode(), i, 1);
            resultTable.setValueAt(currentCard.getManaCost(), i, 2);
            resultTable.setValueAt(currentCard.getTypeLine(), i, 3);
            resultTable.setValueAt(currentCard.getColorIdentity(), i, 4);
        }
    }

    private void addRow() {
        tableModel.addRow(new Object[5]);
        tableModel.fireTableDataChanged();
    }

    private void clearResultTable() {
        tableModel = new DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Name", "Sets", "Mana costs", "Card Type", "Color(s)"
                }
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        resultTable.setModel(tableModel);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
            //lol exception machine go brrrr
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel cardImageHeaderLabel;
    private javax.swing.JLabel cardImageLabel;
    private javax.swing.JTextField cardNameDisplay;
    private javax.swing.JLabel cardNameLabel;
    private javax.swing.JTextArea cardOracleDisplay;
    public static javax.swing.JComboBox<String> cardTypeComboBox;
    private javax.swing.JTextField cardTypeDisplay;
    private javax.swing.JLabel cardTypeLabel;
    public static javax.swing.JComboBox<String> cmcComboBox;
    public static javax.swing.JComboBox<String> colourComboBox;
    private javax.swing.JTextField colourDisplay;
    private javax.swing.JLabel colourLabel;
    private javax.swing.JLabel colourLabel1;
    private javax.swing.JLabel colourLabel2;
    public static javax.swing.JComboBox<String> creatureTypeComboBox;
    public static javax.swing.JCheckBox filterCMCBox;
    public static javax.swing.JCheckBox filterCardBox;
    public static javax.swing.JCheckBox filterColourBox;
    public static javax.swing.JCheckBox filterCreatureTypeBox;
    public static javax.swing.JCheckBox filterNameBox;
    public static javax.swing.JCheckBox filterOracleBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JFrame largeImageFrame;
    private javax.swing.JLabel largeImageHeader;
    private javax.swing.JLabel largeImageLabel;
    private javax.swing.JTextField manaCostDisplay;
    private javax.swing.JLabel manaCostLabel;
    public static javax.swing.JTextField oracleText;
    private javax.swing.JLabel resultPageCountLabel;
    private javax.swing.JScrollPane resultScrollPane;
    private javax.swing.JScrollPane resultScrollPane1;
    private javax.swing.JScrollPane resultScrollPane2;
    public static javax.swing.JTable resultTable;
    public static javax.swing.JTable resultTable1;
    public static javax.swing.JTable resultTable2;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton searchButton1;
    private javax.swing.JButton searchButton2;
    private javax.swing.JTextField searchField;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JPanel searchPanel1;
    public static javax.swing.JPanel searchPanel2;
    private javax.swing.JTextField setDisplay;
    private javax.swing.JLabel setLabel;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
